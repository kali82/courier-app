{"version":3,"sources":["webpack:///src/app/auth/admin.guard.ts","webpack:///src/app/auth/auth-routing.module.ts","webpack:///src/app/auth/auth.module.ts","webpack:///src/app/auth/create/create.component.ts","webpack:///src/app/auth/create/create.component.html","webpack:///src/app/auth/login/login.component.ts","webpack:///src/app/auth/login/login.component.html"],"names":["AdminGuard","authService","router","route","state","isAdmin","getIsAdmin","navigate","providedIn","routes","path","redirectTo","component","canActivate","AuthRoutingModule","forChild","imports","exports","AuthModule","declarations","CreateComponent","isLoading","form","invalid","createUser","value","login","password","templateUrl","styleUrls","LoginComponent","isUnauthorized","authStatusSub","getAuthStatusListener","subscribe","authStatus","unsubscribe"],"mappings":"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","file":"auth-auth-module-es5.js","sourcesContent":["import {\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  Router,\n} from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { AuthService } from './auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AdminGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean | Observable<boolean> | Promise<boolean> {\n    const isAdmin = this.authService.getIsAdmin();\n    if (!isAdmin) {\n      this.router.navigate(['/dashboard']);\n    }\n    return isAdmin;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginComponent } from './login/login.component';\nimport { CreateComponent } from './create/create.component';\nimport { AdminGuard } from './admin.guard';\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'login' },\n  { path: 'login', component: LoginComponent },\n  { path: 'create', component: CreateComponent, canActivate: [AdminGuard] },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AuthRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { LoginComponent } from './login/login.component';\nimport { CreateComponent } from './create/create.component';\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { AngularMaterialModule } from '../material.module';\n\n@NgModule({\n  declarations: [LoginComponent, CreateComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    AuthRoutingModule,\n    AngularMaterialModule,\n  ],\n})\nexport class AuthModule {}\n","import { Component } from '@angular/core';\nimport { NgForm } from '@angular/forms';\n\nimport { AuthService } from '../auth.service';\n\n@Component({\n  templateUrl: './create.component.html',\n  styleUrls: ['./create.component.css'],\n})\nexport class CreateComponent {\n  isLoading = false;\n\n  constructor(public authService: AuthService) {}\n\n  onSignup(form: NgForm) {\n    if (form.invalid) {\n      return;\n    }\n    this.isLoading = true;\n    this.authService.createUser(form.value.login, form.value.password);\n  }\n}\n","<mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n<form (submit)=\"onSignup(signupForm)\" #signupForm=\"ngForm\" *ngIf=\"!isLoading\">\n  <mat-form-field>\n    <input\n      matInput\n      name=\"login\"\n      ngModel\n      type=\"login\"\n      placeholder=\"login\"\n      #loginInput=\"ngModel\"\n      required\n    />\n    <mat-error *ngIf=\"loginInput.invalid\">Podaj poprawny login.</mat-error>\n  </mat-form-field>\n  <mat-form-field>\n    <input\n      type=\"password\"\n      name=\"password\"\n      ngModel\n      matInput\n      placeholder=\"hasło\"\n      #passwordInput=\"ngModel\"\n      required\n    />\n    <mat-error *ngIf=\"passwordInput.invalid\">Podaj prawidłowe hasło.</mat-error>\n  </mat-form-field>\n  <button mat-raised-button color=\"accent\" type=\"submit\" *ngIf=\"!isLoading\">\n    rejestruj\n  </button>\n</form>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\nimport { AuthService } from '../auth.service';\n\n@Component({\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n  isLoading = false;\n  isUnauthorized = false;\n  private authStatusSub: Subscription;\n\n  constructor(public authService: AuthService) {}\n\n  ngOnInit() {\n    this.authStatusSub = this.authService\n      .getAuthStatusListener()\n      .subscribe(authStatus => {\n        this.isLoading = false;\n        if (!authStatus) {\n          this.isUnauthorized = true;\n        }\n      });\n  }\n\n  onLogin(form: NgForm) {\n    if (form.invalid) {\n      return;\n    }\n    this.isLoading = true;\n    this.authService.login(form.value.login, form.value.password);\n  }\n\n  ngOnDestroy() {\n    this.authStatusSub.unsubscribe();\n  }\n}\n","<mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n<form (submit)=\"onLogin(loginForm)\" #loginForm=\"ngForm\" *ngIf=\"!isLoading\">\n  <mat-form-field>\n    <input\n      matInput\n      name=\"login\"\n      type=\"login\"\n      ngModel\n      placeholder=\"login\"\n      #loginInput=\"ngModel\"\n      required\n    />\n    <mat-error *ngIf=\"loginInput.invalid\">Treść walidacji</mat-error>\n  </mat-form-field>\n  <mat-form-field>\n    <input\n      matInput\n      name=\"password\"\n      type=\"password\"\n      ngModel\n      placeholder=\"hasło\"\n      #passwordInput=\"ngModel\"\n      required\n    />\n    <mat-error *ngIf=\"passwordInput.invalid\">Podaj prawidłowe hasło.</mat-error>\n  </mat-form-field>\n  <button mat-raised-button color=\"accent\" type=\"submit\" *ngIf=\"!isLoading\">\n    zaloguj\n  </button>\n</form>\n<p *ngIf=\"isUnauthorized\">Podano niewłaściwy login lub hasło.</p>\n"]}